{"version":3,"sources":["NetworkChart.js","App.js","reportWebVitals.js","index.js"],"names":["NetworkChart","data","useEffect","console","log","chart","d3","attr","tooltip","append","html","simulation","force","strength","width","height","link","selectAll","links","enter","node","nodes","d","name","text","call","on","e","active","alphaTarget","restart","fx","x","fy","y","style","pageX","pageY","source","target","className","App","raw","RawData","characters","count","forEach","element","index","Source","Target","includes","push","id","createNodes","lines","sourceElement","find","targetElement","createLinks","finalData","mergeData","setData","setIsLoaded","useState","isLoaded","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b6e6741.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport * as d3 from \"d3\";\r\n\r\nfunction NetworkChart({ data }) {\r\n  useEffect(() => {\r\n    const width = 1200;\r\n    const height = 800;\r\n\r\n    console.log(data);\r\n\r\n    //Initializing chart\r\n    const chart = d3\r\n      .select(\".chart\")\r\n      .attr(\"width\", width)\r\n      .attr(\"height\", height);\r\n    //.attr(\"style\", \"outline: thin solid red;\");\r\n\r\n    //Creating tooltip\r\n    const tooltip = d3\r\n      .select(\".container\")\r\n      .append(\"div\")\r\n      .attr(\"class\", \"tooltip\")\r\n      .html(\"Tooltip\");\r\n\r\n    //Initializing force simulation\r\n    const simulation = d3\r\n      .forceSimulation()\r\n      .force(\"link\", d3.forceLink())\r\n      .force(\"charge\", d3.forceManyBody().strength(-100))\r\n      .force(\"collide\", d3.forceCollide())\r\n      .force(\"center\", d3.forceCenter(width / 2, height / 2))\r\n      .force(\"y\", d3.forceY(0))\r\n      .force(\"x\", d3.forceX(0));\r\n\r\n    //Drag functions\r\n    const dragStart = (e, d) => {\r\n      if (!e.active) simulation.alphaTarget(0.3).restart();\r\n      d.fx = d.x;\r\n      d.fy = d.y;\r\n    };\r\n\r\n    const drag = (e, d) => {\r\n      d.fx = e.x;\r\n      d.fy = e.y;\r\n    };\r\n\r\n    const dragEnd = (e, d) => {\r\n      if (!e.active) simulation.alphaTarget(0);\r\n      d.fx = null;\r\n      d.fy = null;\r\n    };\r\n\r\n    //Creating links\r\n    const link = chart\r\n      .append(\"g\")\r\n      .attr(\"class\", \"links\")\r\n      .selectAll(\"line\")\r\n      .data(data.links)\r\n      .enter()\r\n      .append(\"line\");\r\n\r\n    //Creating nodes\r\n    const node = d3\r\n      .select(\".chartContainer\")\r\n      .selectAll(\"div\")\r\n      .data(data.nodes)\r\n      .enter()\r\n      .append(\"div\")\r\n      .attr(\"class\", (d) => {\r\n        return \"flag flag-\" + d.name;\r\n      })\r\n      .text(function (d) {\r\n        return d.name;\r\n      })\r\n      .call(\r\n        d3.drag().on(\"start\", dragStart).on(\"drag\", drag).on(\"end\", dragEnd)\r\n      )\r\n      .on(\"mouseover\", (e, d) => {\r\n        tooltip\r\n          .html(d.name)\r\n          .style(\"left\", e.pageX + 5 + \"px\")\r\n          .style(\"top\", e.pageY + 5 + \"px\")\r\n          .style(\"opacity\", 0.8);\r\n      })\r\n      .on(\"mouseout\", () => {\r\n        tooltip.style(\"opacity\", 0).style(\"left\", \"0px\").style(\"top\", \"0px\");\r\n      });\r\n\r\n    //Setting location when ticked\r\n    const ticked = () => {\r\n      link\r\n        .attr(\"x1\", (d) => {\r\n          return d.source.x;\r\n        })\r\n        .attr(\"y1\", (d) => {\r\n          return d.source.y;\r\n        })\r\n        .attr(\"x2\", (d) => {\r\n          return d.target.x;\r\n        })\r\n        .attr(\"y2\", (d) => {\r\n          return d.target.y;\r\n        });\r\n\r\n      node.attr(\"style\", (d) => {\r\n        return \"left: \" + d.x + \"px; top: \" + (d.y + 72) + \"px\";\r\n      });\r\n    };\r\n\r\n    //Starting simulation\r\n    simulation.nodes(data.nodes).on(\"tick\", ticked);\r\n\r\n    simulation.force(\"link\").links(data.links);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Book 1 Network</h1>\r\n      <div className=\"chartContainer\">\r\n        <svg className=\"chart\"></svg>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NetworkChart;\r\n","import { useEffect, useState } from \"react\";\nimport NetworkChart from \"./NetworkChart\";\nimport RawData from \"./book1.json\";\nimport \"./App.css\";\n\nfunction createLinks(nodes, raw) {\n  let lines = [];\n\n  raw.forEach((element) => {\n    let source = element.Source;\n    let target = element.Target;\n\n    let sourceElement = nodes.find((element) => element.name === source);\n    let targetElement = nodes.find((element) => element.name === target);\n\n    lines.push({ source: sourceElement.id, target: targetElement.id });\n  });\n\n  return lines;\n}\n\nfunction createNodes(raw) {\n  let characters = [];\n  let nodes = [];\n  let count = 0;\n\n  raw.forEach((element, index) => {\n    let source = element.Source;\n    let target = element.Target;\n\n    if (!characters.includes(source)) {\n      characters.push(source);\n      nodes.push({ id: count, name: source });\n      count += 1;\n    }\n\n    if (!characters.includes(target)) {\n      characters.push(target);\n      nodes.push({ id: count, name: target });\n      count += 1;\n    }\n  });\n\n  return nodes;\n}\n\nfunction mergeData(nodes, links) {\n  let data = { nodes: nodes, links: links };\n  return data;\n}\n\nfunction App() {\n  useEffect(() => {\n    let raw = RawData;\n    let nodes = createNodes(raw);\n    let links = createLinks(nodes, raw);\n\n    let finalData = mergeData(nodes, links);\n\n    setData(finalData);\n\n    setIsLoaded(true);\n  }, []);\n\n  const [data, setData] = useState({});\n\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  return isLoaded && <NetworkChart data={data} />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}